services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: ahmetcan
      POSTGRES_PASSWORD: 123
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring

  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - spring

  elasticsearch:
    image: elasticsearch:7.17.7
    container_name: elasticsearch
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - esdata:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node

#  mongodb:
#    image: mongo
#    container_name: mongodb
#    ports:
#      - 27017:27017
#    volumes:
#      - mongodb:/data/db
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=rootuser
#      - MONGO_INITDB_ROOT_PASSWORD=rootpass
#
#  mongo-express:
#    image: mongo-express
#    container_name: mongo-express
#    restart: always
#    ports:
#      - 9081:8081
#    environment:
#      - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
#      - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
#      - ME_CONFIG_MONGODB_SERVER=mongodb



#  user-service:
#    container_name: user-service
#    image: ahmetcan7/user-service
#    build:
#      context: /user-service
#      dockerfile: Dockerfile
#    ports:
#      - "8084:8084"
#    environment:
#      - EUREKA_URI= http://eureka-server:8761/eureka
#      - spring.datasource.url=jdbc:postgresql://postgres:5432/user
#    depends_on:
#      - postgres
#      - eureka-server
#      - api-gateway
#    networks:
#      - postgres
#      - eureka
#
#  product-service:
#    container_name: product-service
#    image: ahmetcan7/product-service
#    build:
#      context: /product-service
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    environment:
#      - EUREKA_URI= http://eureka-server:8761/eureka
#      - spring.datasource.url=jdbc:postgresql://postgres:5432/product
#    depends_on:
#      - postgres
#      - eureka-server
#      - api-gateway
#    networks:
#      - postgres
#      - eureka
#
#  order-service:
#    container_name: order-service
#    image: ahmetcan7/order-service
#    build:
#      context: /order-service
#      dockerfile: Dockerfile
#    ports:
#      - "8081:8081"
#    environment:
#      - EUREKA_URI= http://eureka-server:8761/eureka
#      - spring.datasource.url=jdbc:postgresql://postgres:5432/order
#    depends_on:
#      - postgres
#      - eureka-server
#      - api-gateway
#    networks:
#      - postgres
#      - eureka
#
#  notification-service:
#    container_name: notification-service
#    image: ahmetcan7/notification-service
#    build:
#      context: /notification-service
#      dockerfile: Dockerfile
#    ports:
#      - "8085:8085"
#    environment:
#      - EUREKA_URI= http://eureka-server:8761/eureka
#    depends_on:
#      - eureka-server
#      - api-gateway
#    networks:
#      - eureka
#
#  file-service:
#    container_name: file-service
#    image: ahmetcan7/file-service
#    build:
#      context: /file-service
#      dockerfile: Dockerfile
#    ports:
#      - "8086:8086"
#    environment:
#      - EUREKA_URI= http://eureka-server:8761/eureka
#    depends_on:
#      - eureka-server
#      - api-gateway
#    networks:
#      - eureka
#
#  inventory-service:
#    container_name: inventory-service
#    image: ahmetcan7/inventory-service
#    build:
#      context: /inventory-service
#      dockerfile: Dockerfile
#    environment:
#      - EUREKA_URI= http://eureka-server:8761/eureka
#      - spring.datasource.url=jdbc:postgresql://postgres:5432/inventory
#    depends_on:
#      - postgres
#      - eureka-server
#      - api-gateway
#    networks:
#      - postgres
#      - eureka

#  eureka-server:
#    container_name: eureka-server
#    image: ahmetcan7/eureka-server
#    build: ./eureka-server
#    ports:
#      - "8761:8761"
#    networks:
#      - eureka
#    environment:
#      - EUREKA_URI= http://eureka-server:8761/eureka
#
#  api-gateway:
#    container_name: api-gateway
#    image: ahmetcan7/api-gateway
#    build: ./gateway
#    ports:
#      - "8889:8889"
#    depends_on:
#      - eureka-server
#    networks:
#      - eureka
#    environment:
#      - EUREKA_URI= http://eureka-server:8761/eureka


networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge
  eureka:
    driver: bridge
#  default:
#    name: mongodb_network

volumes:
  postgres:
  pgadmin:
  esdata:
#  mongodb:

